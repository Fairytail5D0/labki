import urllib.request
import pandas as pd
from datetime import datetime
import os
import glob
import time 

REGIONS = {
    1: '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞', 2: '–í–æ–ª–∏–Ω—Å—å–∫–∞', 3: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞', 4: '–î–æ–Ω–µ—Ü—å–∫–∞', 5: '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞',
    6: '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞', 7: '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞', 8: '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞', 9: '–ö–∏—ó–≤—Å—å–∫–∞', 10: '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞',
    11: '–õ—É–≥–∞–Ω—Å—å–∫–∞', 12: '–õ—å–≤—ñ–≤—Å—å–∫–∞', 13: '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞', 14: '–û–¥–µ—Å—å–∫–∞', 15: '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞',
    16: '–†—ñ–≤–µ–Ω—Å—å–∫–∞', 17: '–°—É–º—Å—å–∫–∞', 18: '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞', 19: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞', 20: '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞',
    21: '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞', 22: '–ß–µ—Ä–∫–∞—Å—å–∫–∞', 23: '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞', 24: '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞', 25: '–†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º',26: '–ö–∏—ó–≤',27:'–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å',
}


NOAA_TO_UA = {
    1: 22,  2: 24,  3: 23,  4: 25,   5: 3,   6: 4,  7: 8,  8: 19,   
    9: 20, 10: 21, 11: 9, 12: 26, 13: 10, 14: 11, 15: 12, 16: 13,  
    17: 14, 18: 15, 19: 16,  20: 27,  21: 17,  22: 18,  23: 6,  24: 1,  
    25: 2 , 26: 7, 27: 5 
}

def print_regions():
    """ –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ """
    print("\nregions of Ukraine")
    for i in range(1, 28, 2):  
        r1 = f"{i}. {REGIONS[i]:<18}"  
        r2 = f"{i+1}. {REGIONS[i+1]}" if i+1 in REGIONS else ""  
        print(f"{r1} {r2}")
    print()

def download_vhi_data(ua_id, directory="vhi_data"):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ VHI –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ, –∫–æ–Ω–≤–µ—Ä—Ç—É—é—á–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —ñ–Ω–¥–µ–∫—Å –≤ NOAA
    —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —É –∑–∞–∑–Ω–∞—á–µ–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é.
    """
    if not os.path.exists(directory):
        os.makedirs(directory)  # –°—Ç–≤–æ—Ä—é—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    
    noaa_id = list(NOAA_TO_UA.keys())[list(NOAA_TO_UA.values()).index(ua_id)]  
    url = f"https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={noaa_id}&year1=1981&year2=2024&type=Mean"
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'vhi_{REGIONS[ua_id]}_{timestamp}.csv'
    filepath = os.path.join(directory, filename)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª —É –≤–∫–∞–∑–∞–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    
    try:
        vhi_url = urllib.request.urlopen(url)
        with open(filepath, 'wb') as out:
            out.write(vhi_url.read())
        print(f"data fro {REGIONS[ua_id]} (ID: {ua_id}, NOAA ID: {noaa_id}) dawnloaded in  {filepath}\n")
        return filepath
    except Exception as e:
        print(f"error downloading for the province {REGIONS[ua_id]}: {e}\n")
        return None

def download_all_regions_vhi(directory="vhi_data", delay=2):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ VHI –¥–ª—è –≤—Å—ñ—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    """
    print("starting to download data for all provincees...")
    downloaded_files = []
    
   
    for region_id in range(1, 28):
        try:
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä
            time.sleep(delay)
            
            file_path = download_vhi_data(region_id, directory)
            if file_path:
                downloaded_files.append(file_path)
        except Exception as e:
            print(f"error downloading for the province  {region_id}: {e}")
    
    print(f"download completed.{len(downloaded_files)} —Ñ–∞–π–ª—ñ–≤.")
    return downloaded_files
    
#-----------------------------------------------------------------------------    
 


def read_vhi_files(directory="vhi_data"):
    """
    –ó—á–∏—Ç—É—î –≤—Å—ñ CSV —Ñ–∞–π–ª–∏ –∑ –≤–∫–∞–∑–∞–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —É —î–¥–∏–Ω–∏–π DataFrame
    –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤
    """
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤
    all_files = glob.glob(os.path.join(directory, "vhi_*_*.csv"))
    df_list = []
    
    if not all_files:
        print("‚ö† –í–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ñ–≤ –∑ VHI –¥–∞–Ω–∏–º–∏.")
    
    for filename in all_files:
        print(f"üìÑ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {filename}...")
        df = pd.read_csv(filename, index_col=False, header=1)
        df.columns = ['Year', 'Week', 'SMN', 'SMT', 'VCI', 'TCI', 'VHI', 'Region']
        df_list.append(df)
    
    if df_list:
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df_list)} —Ñ–∞–π–ª—ñ–≤ VHI –¥–∞–Ω–∏—Ö.")
        return pd.concat(df_list, ignore_index=True)
    else:
        print("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É.")
        return pd.DataFrame()

def update_region_indices(df):
    """
    –û–Ω–æ–≤–ª—é—î —ñ–Ω–¥–µ–∫—Å–∏ –æ–±–ª–∞—Å—Ç–µ–π –∑–≥—ñ–¥–Ω–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
    """
    print("updating indexes...")
    df['Region_Name'] = df['Region'].map(REGIONS)
    print("indexes updated")
    return df

def get_vhi_for_region_year(df, region_id, year):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥ VHI –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ —Ä–æ–∫—É
    """
    result = df[(df['Region'] == region_id) & (df['Year'] == year)][['Week', 'VHI']]
    print(f"üìä –î–∞–Ω—ñ VHI –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ {REGIONS[region_id]} –∑–∞ {year} —Ä—ñ–∫:")
    print(result)
    return result

def get_vhi_extremes(df, region_ids, years):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –µ–∫—Å—Ç—Ä–µ–º—É–º–∏ VHI –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —Ç–∞ —Ä–æ–∫—ñ–≤
    """
    filtered_df = df[(df['Region'].isin(region_ids)) & (df['Year'].isin(years))]
    if filtered_df.empty:
        print("‚ö† –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π –∞–±–æ —Ä–æ–∫—ñ–≤.")
        return None
    
    stats = {
        'min_vhi': filtered_df['VHI'].min(),
        'max_vhi': filtered_df['VHI'].max(),
        'mean_vhi': filtered_df['VHI'].mean(),
        'median_vhi': filtered_df['VHI'].median()
    }
    
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è VHI –≤ –æ–±–ª–∞—Å—Ç—ñ/—Ä–æ–∫–∞—Ö {region_ids} —Ç–∞ {years}:")
    print(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π VHI: {stats['min_vhi']}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π VHI: {stats['max_vhi']}")
    print(f"–°–µ—Ä–µ–¥–Ω—î VHI: {stats['mean_vhi']}")
    print(f"–ú–µ–¥—ñ–∞–Ω–∞ VHI: {stats['median_vhi']}")
    
    return stats

def get_vhi_range(df, region_ids, start_year, end_year):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥ VHI –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π
    """
    result = df[(df['Region'].isin(region_ids)) & (df['Year'].between(start_year, end_year))][['Year', 'Week', 'Region', 'VHI']]
    print(f"üìä –î—ñ–∞–ø–∞–∑–æ–Ω VHI –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π {region_ids} –∑ {start_year} –ø–æ {end_year}:")
    print(result)
    return result

def find_extreme_droughts(df, threshold_percent=20):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–∫–∏ –∑ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–º–∏ –ø–æ—Å—É—Ö–∞–º–∏, —â–æ —Ç–æ—Ä–∫–Ω—É–ª–∏—Å—è –±—ñ–ª—å—à–µ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –≤—ñ–¥—Å–æ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
    """
    results = []
    total_regions = 25
    threshold_regions = int(total_regions * threshold_percent / 100)
    
    print(f"üîç –ü–æ—à—É–∫ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –ø–æ—Å—É—Ö, —â–æ —Ç–æ—Ä–∫–Ω—É–ª–∏—Å—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ {threshold_percent}% –æ–±–ª–∞—Å—Ç–µ–π...")
    
    for year in df['Year'].unique():
        year_data = df[df['Year'] == year]
        drought_regions = year_data[year_data['VHI'] < 15]['Region'].unique()
        
        if len(drought_regions) >= threshold_regions:
            results.append({
                'year': year,
                'affected_regions': len(drought_regions),
                'regions': [REGIONS[r] for r in drought_regions if r in REGIONS],
                'vhi_values': year_data[year_data['Region'].isin(drought_regions)]['VHI'].tolist()
            })
    
    if results:
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–æ–∫—ñ–≤ –∑ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–º–∏ –ø–æ—Å—É—Ö–∞–º–∏.")
        for result in results:
            print(f"–†—ñ–∫ {result['year']} - –û–±–ª–∞—Å—Ç—ñ: {', '.join(result['regions'])} - VHI: {result['vhi_values']}")
    else:
        print("‚ö† –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –ø–æ—Å—É—Ö –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—ñ–≥.")
    
    return results

def main():
    df = None
    while True:
        print("\nMenu:")
        print("1 - Download data for a separate province")
        print("2 - Download data for all provinces")
        print("3 - Read and analyze VHI data")
        print("0 - Exit")
        
        try:
            choice = int(input("Enter number of operation: "))
            
            if choice == 0:
                print("Exiting...")
                break
            elif choice == 1:
                print_regions()
                province_id = int(input("Enter province number (1-27) or 0 to exit: "))
                if 1 <= province_id <= 27:
                    download_vhi_data(province_id)
                elif province_id == 0:
                    print("Exiting...")
                else:
                    print("Invalid input. Enter a number from 1 to 27.")
            elif choice == 2:
                download_all_regions_vhi()
            elif choice == 3:
                df = read_vhi_files()
                if df is not None:
                    while True:
                        print("\nVHI Data Analysis Menu:")
                        print("1 - Update region indices")
                        print("2 - Get VHI for a region and year")
                        print("3 - Get VHI extremes for regions and years")
                        print("4 - Get VHI for a range of years")
                        print("5 - Find extreme droughts")
                        print("0 - Return to main menu")
                        
                        sub_choice = int(input("Enter number of operation: "))
                        
                        if sub_choice == 0:
                            break
                        elif sub_choice == 1:
                            df = update_region_indices(df)
                        elif sub_choice == 2:
                            region_id = int(input("Enter region ID: "))
                            year = int(input("Enter year: "))
                            get_vhi_for_region_year(df, region_id, year)
                        elif sub_choice == 3:
                            region_ids = list(map(int, input("Enter region IDs separated by space: ").split()))
                            years = list(map(int, input("Enter years separated by space: ").split()))
                            get_vhi_extremes(df, region_ids, years)
                        elif sub_choice == 4:
                            region_ids = list(map(int, input("Enter region IDs separated by space: ").split()))
                            start_year = int(input("Enter start year: "))
                            end_year = int(input("Enter end year: "))
                            get_vhi_range(df, region_ids, start_year, end_year)
                        elif sub_choice == 5:
                            threshold = int(input("Enter threshold percentage (default 20): ") or 20)
                            find_extreme_droughts(df, threshold)
                        else:
                            print("Invalid choice. Enter a number between 0 and 5.")
            else:
                print("Invalid choice. Enter a number between 0 and 3.")
        except ValueError:
            print("Invalid input. Enter an integer.")

if __name__ == "__main__":
    main()
